version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: policr_postgres
    environment:
      POSTGRES_DB: policr_mini
      POSTGRES_USER: policr_mini
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - policr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U policr_mini"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: policr_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - policr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    image: hentioe/policr-mini:latest
    container_name: policr_mini_app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - prod.env
    environment:
      - REDIS_HOST=redis
      - DB_HOST=postgres
    ports:
      - "4000:4000"
    networks:
      - policr_network
    restart: unless-stopped
    command: sh -c "mix ecto.migrate && mix phx.server"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: policr_nginx
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - policr_network
    restart: unless-stopped

networks:
  policr_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local