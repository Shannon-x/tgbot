# 基础配置 - 适用于生产和开发环境
x-app-base: &app-base
  build:
    context: .
    dockerfile: Dockerfile
    target: runtime
  env_file:
    - .env
  restart: unless-stopped
  depends_on:
    - postgres
    - redis

# 数据库配置
x-postgres-base: &postgres-base
  image: postgres:16-alpine
  restart: unless-stopped
  environment:
    POSTGRES_DB: ${DB_NAME:-policr_mini}
    POSTGRES_USER: ${DB_USER:-postgres}
    POSTGRES_PASSWORD: ${DB_PASS:-postgres}
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
    interval: 10s
    timeout: 5s
    retries: 5

services:
  # 应用服务
  app:
    <<: *app-base
    ports:
      - "${PORT:-4000}:4000"
    volumes:
      - app_assets:/app/_assets
    environment:
      DATABASE_URL: "postgresql://${DB_USER:-postgres}:${DB_PASS:-postgres}@postgres:5432/${DB_NAME:-policr_mini}"
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      PHX_HOST: ${PHX_HOST:-localhost}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_OWNER_ID: ${TG_OWNER_ID}
      TG_API_BASE_URL: ${TG_API_BASE_URL:-https://api.telegram.org}

  # PostgreSQL 数据库
  postgres:
    <<: *postgres-base
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis 缓存
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  app_assets: